//Author: Madison Sanchez-Forman Version: 10.4.21
var min_len = 3, max_len = 6,//min and max length for all words in dictionary and all words input by user
guessedWords = [], //array to hold words that the user has correctly guessed
hiddenWords = [],//array to hold words that are originally hidden from the user
availableWords = [],//array to hold words from original dictionary in words_alpha.js that are within range length(this is to make it faster so it doesnt have to loop through irrelevant words)
rootWords = []; //array to hold words of length 6 that are the base of the game
generate_dictionary();//only time dictionary in words_aplha.js is looped throug
rootWords.concat(get_root_words());
let startWord = rootWords[Math.floor(Math.random() * rootWords.length)];
hiddenWords = valid_combos(startWord); //takes the combinations generated by combos and filters out ones that aren't in the available word list

//called each time while loop below runs. displays dashes and/or correctly guessed word along with scrambled root word
function display() {
    console.log("Available letters: " + scramble(startWord)+ "\n");
    for(var i = 0; i < hiddenWords.length; i++){
    if(guessedWords.includes(hiddenWords[i])){
        let output = hiddenWords[i];
        console.log(output);
    } else {
        let output = ("- ".repeat(hiddenWords[i].length)+"\n");
        console.log(output);
          }
      }
    }

//while the user has not guessed all of the words
while (guessedWords.length < hiddenWords.length){ 
    display();
    var guess = prompt("Enter a guess: ");
 if(guess == null){ //if the user clicks cancel and ends, immediately go to ending function and break 
    ending();
    break;
 } else if(guess == "*"){
    alert("scrambling root word...");
    startWord = scramble(startWord);
    console.log(startWord);
 } else if(guess.length < min_len){
     alert("guess is too short, try again")
 } else if(guess.length > max_len){
   alert("guess is too long, try again");
 }  else if (guessedWords.includes(guess)){
     alert ("You've already guessed: " + guess + "! Try again.")
 } else if(hiddenWords.includes(guess)){
    alert("Correct guess! you guessed " + guess);
    guessedWords.push(guess);
    console.log(guess);
 }
 else {
     alert("word does not exist, try again");
 }
 console.clear();
} 
//ending function, prints results and key
function ending(){
 var str = "You answered " + guessedWords.length + " out of " + hiddenWords.length + "! \n";
 console.log(str);
 for(var i = 0; i < hiddenWords.length; i++){
 console.log(hiddenWords[i]);
 }
}

//generating availableWords[] from original dictionary
function generate_dictionary(){
    for(index = 0; index < dictionary.length; index++){
        if(dictionary[index].length >= min_len && dictionary[index].length <= max_len) {
            availableWords.push(dictionary[index]);
        }
    }
}
//generating rootWords that are length == 6
function get_root_words(){
    for(index = 0; index < availableWords.length; index++)
    if(availableWords[index].length == max_len) {
        rootWords.push(availableWords[index]);
    }
}
//function for getting all possibly sub strings of root word
function combos(str){
    let arr = [];  //temporary array
    for (let x = 0, y=1; x < str.length; x++,y++) {
       arr[x]=str.substring(x, y);
  }
    let result = []; //to store finished permutations
    let temp= "";
    let len = Math.pow(2, arr.length); //2* length of each substring
    for (let i = 0; i < len; i++){
       temp= "";
       for (let j=0;j<len;j++) {
          if ((i & Math.pow(2,j))){//bitwise comparison
             temp += arr[j];
          }
       }
       if (temp !== ""){
          result.push(temp);
       }
    }
    return result;
}


//see if combination exists in available words
function valid_combos(str){
    options = combos(startWord);
    result = [];
      for(var j = 0; j < options.length; j++){
        if(availableWords.includes(options[j])){
            result.push(options[j]);
        }
} 
return result;
}

//function to scramble root word at the beginning and/or at the users request
function scramble(str) {
    let arr = str.split(''),
    len = arr.length;
   for (let i = 0; i < len; i++){
       let j = Math.floor(Math.random() * str.length);
       let temp = arr[i];
       arr[i] = arr[j];
       arr[j] = temp;
       }
   str = arr.join('');
   return str;
     }


